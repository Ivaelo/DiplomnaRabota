// <auto-generated />
using Diplomna.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Diplomna.Migrations
{
    [DbContext(typeof(UsersInfoContext))]
    [Migration("20230211225307_Tests3")]
    partial class Tests3
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Diplomna.Entities.Courses", b =>
                {
                    b.Property<int>("Courseid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Courseid"));

                    b.Property<string>("CoursName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Courseid");

                    b.HasIndex("UserName");

                    b.ToTable("courses");
                });

            modelBuilder.Entity("Diplomna.Entities.MyCourses", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("coursId")
                        .HasColumnType("integer");

                    b.Property<float>("progres")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("UserName");

                    b.ToTable("MyCourses");
                });

            modelBuilder.Entity("Diplomna.Entities.MyTests", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<float>("Score")
                        .HasColumnType("real");

                    b.Property<int>("TestId")
                        .HasColumnType("integer");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("coursId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserName");

                    b.ToTable("MyTests");
                });

            modelBuilder.Entity("Diplomna.Entities.Questions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("A")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("B")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("C")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RightAnser")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TestsId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TestsId");

                    b.ToTable("questions");
                });

            modelBuilder.Entity("Diplomna.Entities.Roles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UsersName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UsersName");

                    b.ToTable("roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Role = "admin",
                            UsersName = "Admin"
                        });
                });

            modelBuilder.Entity("Diplomna.Entities.Tests", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<float>("Score")
                        .HasColumnType("real");

                    b.Property<int>("UnitsId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UnitsId");

                    b.ToTable("tests");
                });

            modelBuilder.Entity("Diplomna.Entities.Units", b =>
                {
                    b.Property<int>("Unitid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Unitid"));

                    b.Property<int>("CoursesId")
                        .HasColumnType("integer");

                    b.Property<string>("UnitName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("test")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Unitid");

                    b.HasIndex("CoursesId");

                    b.ToTable("units");
                });

            modelBuilder.Entity("Diplomna.Entities.Users", b =>
                {
                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("name");

                    b.ToTable("users");

                    b.HasData(
                        new
                        {
                            name = "Admin",
                            email = "admin@gmail.com",
                            password = "$2a$11$6xkgb4HY49FktJA3ZihW1..RTRKVR3peGnutmb1hHDeoUK7qcBJ0S"
                        });
                });

            modelBuilder.Entity("Diplomna.Entities.Videos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UnitsId")
                        .HasColumnType("integer");

                    b.Property<string>("VideoPath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UnitsId");

                    b.ToTable("videos");
                });

            modelBuilder.Entity("Diplomna.Entities.Courses", b =>
                {
                    b.HasOne("Diplomna.Entities.Users", "User")
                        .WithMany("Corses")
                        .HasForeignKey("UserName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Diplomna.Entities.MyCourses", b =>
                {
                    b.HasOne("Diplomna.Entities.Users", "User")
                        .WithMany("MyCorses")
                        .HasForeignKey("UserName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Diplomna.Entities.MyTests", b =>
                {
                    b.HasOne("Diplomna.Entities.Users", "User")
                        .WithMany("MyTests")
                        .HasForeignKey("UserName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Diplomna.Entities.Questions", b =>
                {
                    b.HasOne("Diplomna.Entities.Tests", "Tests")
                        .WithMany("Questions")
                        .HasForeignKey("TestsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tests");
                });

            modelBuilder.Entity("Diplomna.Entities.Roles", b =>
                {
                    b.HasOne("Diplomna.Entities.Users", null)
                        .WithMany("Roles")
                        .HasForeignKey("UsersName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Diplomna.Entities.Tests", b =>
                {
                    b.HasOne("Diplomna.Entities.Units", "Units")
                        .WithMany("Tests")
                        .HasForeignKey("UnitsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Units");
                });

            modelBuilder.Entity("Diplomna.Entities.Units", b =>
                {
                    b.HasOne("Diplomna.Entities.Courses", "Course")
                        .WithMany("Units")
                        .HasForeignKey("CoursesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Diplomna.Entities.Videos", b =>
                {
                    b.HasOne("Diplomna.Entities.Units", "Units")
                        .WithMany("Videos")
                        .HasForeignKey("UnitsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Units");
                });

            modelBuilder.Entity("Diplomna.Entities.Courses", b =>
                {
                    b.Navigation("Units");
                });

            modelBuilder.Entity("Diplomna.Entities.Tests", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("Diplomna.Entities.Units", b =>
                {
                    b.Navigation("Tests");

                    b.Navigation("Videos");
                });

            modelBuilder.Entity("Diplomna.Entities.Users", b =>
                {
                    b.Navigation("Corses");

                    b.Navigation("MyCorses");

                    b.Navigation("MyTests");

                    b.Navigation("Roles");
                });
#pragma warning restore 612, 618
        }
    }
}
